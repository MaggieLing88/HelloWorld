diff --git a/node_modules/openid-client/lib/client.js b/node_modules/openid-client/lib/client.js
index 6ec4b51..3914b93 100644
--- a/node_modules/openid-client/lib/client.js
+++ b/node_modules/openid-client/lib/client.js
@@ -1,5 +1,5 @@
 const { inspect } = require('util');
-const stdhttp = require('http');
+const stdhttp = require('node:http2');
 const crypto = require('crypto');
 const { strict: assert } = require('assert');
 const querystring = require('querystring');
diff --git a/node_modules/openid-client/lib/helpers/process_response.js b/node_modules/openid-client/lib/helpers/process_response.js
index 7dad565..58e194b 100644
--- a/node_modules/openid-client/lib/helpers/process_response.js
+++ b/node_modules/openid-client/lib/helpers/process_response.js
@@ -1,4 +1,4 @@
-const { STATUS_CODES } = require('http');
+const { STATUS_CODES } = require('node:http2');
 const { format } = require('util');
 
 const { OPError } = require('../errors');
diff --git a/node_modules/openid-client/lib/helpers/request.js b/node_modules/openid-client/lib/helpers/request.js
index 45e4f88..f65f610 100644
--- a/node_modules/openid-client/lib/helpers/request.js
+++ b/node_modules/openid-client/lib/helpers/request.js
@@ -1,6 +1,6 @@
 const assert = require('assert');
 const querystring = require('querystring');
-const http = require('http');
+const http2 = require('node:http2');
 const https = require('https');
 const { once } = require('events');
 const { URL } = require('url');
@@ -43,17 +43,34 @@ setDefaults([], {
   timeout: 3500,
 });
 
-function send(req, body, contentType) {
-  if (contentType) {
-    req.removeHeader('content-type');
-    req.setHeader('content-type', contentType);
-  }
+
+function send(ses, body, contentType) {
   if (body) {
-    req.removeHeader('content-length');
-    req.setHeader('content-length', Buffer.byteLength(body));
-    req.write(body);
+    if (contentType) {
+       let stream = ses.request({ ":method": "POST", 
+       'content-length':Buffer.byteLength(body),
+       'content-type': contentType});
+         stream.on("end", () => {
+          ses.close();
+         });     
+         stream.end(body)
+     }else{
+        let stream = ses.request({ ":method": "POST", 
+     'content-length':Buffer.byteLength(body)});
+     stream.on("end", () => {
+      ses.close();
+     }); 
+     stream.end(body)
+    }
+  }else{
+    if (contentType) {
+      let stream = ses.request({'content-type': contentType });
+         stream.end();
+    }else{
+    let stream = ses.request();
+    stream.end();
+    }
   }
-  req.end();
 }
 
 const nonces = new LRU({ max: 100 });
@@ -117,7 +134,7 @@ module.exports = async function request(options, { accessToken, mTLS = false, DP
   }
 
   let response;
-  const req = (url.protocol === 'https:' ? https.request : http.request)(url.href, opts);
+  const req = (url.protocol === 'https:' ? http2.connect : http2.connect)(url.href, opts);
   return (async () => {
     if (json) {
       send(req, JSON.stringify(json), 'application/json');
